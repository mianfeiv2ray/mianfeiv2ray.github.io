<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://mianfeiv2ray.github.io/news/article-102644.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>SpringSecurity核心服务详解</title>
        <meta name="description" content="现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet" />
        <link rel="icon" href="/assets/website/img/v2raylinux/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="免费V2Ray 订阅机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://mianfeiv2ray.github.io/news/article-102644.htm" />
    <meta property="og:site_name" content="免费V2Ray 订阅机场节点官网" />
    <meta property="og:title" content="SpringSecurity核心服务详解" />
    <meta property="og:image" content="https://mianfeiv2ray.github.io/uploads/20241109-1/14993e4cb1281da20b885c5c9fbd9835.webp" />
        <meta property="og:release_date" content="2025-04-23T08:44:41" />
    <meta property="og:updated_time" content="2025-04-23T08:44:41" />
        <meta property="og:description" content="现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringSecurity核心服务详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://fonts.gstatic.com">

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/" rel="preconnect">
    <link href="https://fonts.gstatic.com/" rel="preconnect" crossorigin="">
    <link href="/assets/website/css/v2raylinux/css2-Robotoitalwght010003000400050007000900110013001400150017001900_OpenSansitalwght030004000500060007000800130014001500160017001800_Poppinsitalwght010002000300040005000600070008000900110012001300140015001600170018001900_swap.css" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/css/v2raylinux/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2raylinux/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/css/v2raylinux/aos.css" rel="stylesheet">
    <link href="/assets/website/css/v2raylinux/all.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2raylinux/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2raylinux/swiper-bundle.min.css" rel="stylesheet">
    <!-- Main CSS File -->
    <link href="/assets/website/css/v2raylinux/main.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-RT7S29254M"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-RT7S29254M');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="about-page" data-page="detail">
        <header id="header" class="header d-flex align-items-center fixed-top">
        <div class="container-fluid container-xl position-relative d-flex align-items-center justify-content-between">
            <a href="/" class="logo d-flex align-items-center">
                                <span class="sitename">免费V2Ray</span>
                            </a>
            <nav id="navmenu" class="navmenu">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                    </ul>
                <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
            </nav>
        </div>
    </header>
    <main class="main">
        <!-- Page Title -->
        <div class="page-title dark-background" style="background-image: url(/assets/website/img/v2raylinux/page-title-bg.jpg);">
            <div class="container position-relative">
                <h1>SpringSecurity核心服务详解</h1>
                <nav class="breadcrumbs">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="新闻资讯">新闻资讯</a></li>
                        <li class="current">正文</li>
                    </ol>
                </nav>
            </div>
        </div><!-- End Page Title -->
        <!-- Alt Services Section -->
        <section id="alt-services" class="alt-services section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail">
                      				  				  				<div id="content_views" class="htmledit_views"> <p>现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是<code>AuthenticationManager</code>&nbsp;、<code>UserDetailsService</code>&nbsp;和<code>AccessDecisionManager</code>&nbsp;。在本文档的其余部分中，这些内容会定期出现，所以了解它们是如何配置和操作的非常重要。</p> <h3>一、AuthenticationManager, ProviderManager 和 AuthenticationProvider</h3> <p><code>AuthenticationManager</code>&nbsp;只是一个接口，因此实现可以是我们选择的任何东西，但它在实践中是如何工作的呢?如果我们需要检查多个身份验证数据库或不同身份验证服务(如数据库和LDAP服务器)的组合，该怎么办?</p> <p>Spring Security 中的默认实现称为<code>ProviderManager</code>&nbsp;，它不是处理身份验证请求本身，而是委托给一个配置的<code>AuthenticationProvider</code>&nbsp;列表，依次查询每个<code>AuthenticationProvider</code>&nbsp;，看看它是否可以执行身份验证。每个 provider [提供者]都将抛出一个异常或返回一个完全填充的<code>Authentication</code>&nbsp;对象。还记得我们的好朋友<code>UserDetails</code>&nbsp;和<code>UserDetailsService</code>&nbsp;吗?如果没有，回到上一章，刷新你的记忆。验证身份验证请求最常用的方法是加载相应的<code>UserDetails</code>&nbsp;，并根据用户输入的密码检查加载的密码。这是<code>DaoAuthenticationProvider</code>&nbsp;使用的方法(见下文)。加载的<code>UserDetails</code>&nbsp;对象——特别是它包含的授权权限——将在构建完整的<code>Authentication</code>&nbsp;对象时使用，该对象从成功的身份验证中返回，并存储在<code>SecurityContext</code>&nbsp;中。</p> <p>如果你正在使用命名空间，<code>ProviderManager</code>&nbsp;的一个实例将在内部创建和维护，你可以通过使用命名空间身份验证提供者元素将提供者添加到它中(参见命名空间一章)。在这种情况下，您不应该在应用程序上下文中声明<code>ProviderManager</code>&nbsp;bean。但是，如果你不使用命名空间，你可以这样声明:</p> <pre>&lt;bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager"&gt;     &lt;constructor-arg&gt;         &lt;list&gt;             &lt;ref local="daoAuthenticationProvider"/&gt;             &lt;ref local="anonymousAuthenticationProvider"/&gt;             &lt;ref local="ldapAuthenticationProvider"/&gt;         &lt;/list&gt;     &lt;/constructor-arg&gt; &lt;/bean&gt; 复制代码</pre> <p>在上面的示例中，我们有三个提供程序。按照显示的顺序(通过使用List隐含了这一点)尝试它们，每个提供者都能够尝试身份验证，或者通过返回<code>null</code>&nbsp;跳过身份验证。如果所有实现都返回<code>null</code>&nbsp;，则<code>ProviderManager</code>&nbsp;将抛出<code>ProviderNotFoundException</code>&nbsp;异常。如果您有兴趣了解更多关于链接提供程序的知识，请参考<code>ProviderManager</code>&nbsp;Javadoc。</p> <p>身份验证机制(如web表单登录处理过滤器)通过对<code>ProviderManager</code>&nbsp;的引用注入，并调用它来处理身份验证请求。您需要的提供者有时可以与身份验证机制互换，而在其他时候，它们将依赖于特定的身份验证机制。例如，<code>DaoAuthenticationProvider</code>&nbsp;和<code>LdapAuthenticationProvider</code>&nbsp;与任何提交简单用户名/密码身份验证请求的机制兼容，因此将用于基于表单的登录或HTTP基本身份验证。另一方面，一些身份验证机制创建的身份验证请求对象只能由单一类型的<code>AuthenticationProvider</code>&nbsp;解释。这方面的一个例子是JA-SIG CAS，它使用了服务票据的概念，因此只能由<code>CasAuthenticationProvider</code>&nbsp;进行身份验证。您不必过于关注这一点，因为如果您忘记注册合适的提供者，在尝试进行身份验证时，您将只会收到<code>ProviderNotFoundException</code>&nbsp;。</p> <p>1.1 在身份验证成功后清除凭据</p> <p>默认情况下(从Spring Security 3.1开始)，<code>ProviderManager</code>&nbsp;将尝试从成功的认证请求返回的认证对象中清除任何敏感的凭据信息。这可以防止像密码这样的信息被保留得超过必要的时间。</p> <p>当您使用用户对象的缓存(例如，在无状态应用程序中提高性能)时，这可能会导致问题。如果身份验证包含对缓存中的对象(例如<code>UserDetails</code>&nbsp;实例)的引用，并且该对象的凭证已被删除，那么将不再可能根据缓存的值进行身份验证。如果您正在使用缓存，则需要考虑到这一点。一个明显的解决方案是首先复制对象，要么在缓存实现中，要么在创建返回的<code>Authentication</code>&nbsp;对象的<code>AuthenticationProvider</code>&nbsp;中。或者，您可以禁用<code>ProviderManager</code>&nbsp;上的<code>eraseCredentialsAfterAuthentication</code>&nbsp;属性。有关更多信息，请参阅Javadoc。</p> <p>1.2 DaoAuthenticationProvider</p> <p>Spring Security 实现的最简单的认证提供者是<code>DaoAuthenticationProvider</code>&nbsp;，它也是 Spring Security 最早支持的认证提供者之一。它利用<code>UserDetailsService</code>&nbsp;(作为一个DAO)来查找用户名、密码和授权权限。它通过将<code>UsernamePasswordAuthenticationToken</code>&nbsp;中提交的密码与<code>UserDetailsService</code>&nbsp;加载的密码进行比较来验证用户。配置提供商非常简单:</p> <pre>&lt;bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"&gt;     &lt;property name="userDetailsService" ref="inMemoryDaoImpl"/&gt;     &lt;property name="passwordEncoder" ref="passwordEncoder"/&gt; &lt;/bean&gt; 复制代码</pre> <p><code>PasswordEncoder</code>&nbsp;是可选的。<code>PasswordEncoder</code>&nbsp;提供了从配置的<code>UserDetailsService</code>&nbsp;返回的<code>UserDetails</code>&nbsp;对象中显示的密码的编码和解码。这将在下面详细讨论。</p> <h3>二、UserDetailsService 实现</h3> <p>正如本参考指南前面提到的，大多数身份验证提供者都利用了<code>UserDetails</code>&nbsp;和<code>UserDetailsService</code>&nbsp;接口。回想一下<code>UserDetailsService</code>&nbsp;的契约是一个单一方法:</p> <pre>UserDetails loadUserByUsername(String username) throws UsernameNotFoundException; 复制代码</pre> <p>返回的<code>UserDetails</code>&nbsp;是一个接口，它提供了 getters，保证提供非空的身份验证信息，例如用户名、密码、授予的权限以及用户帐户是启用还是禁用。大多数身份验证提供者将使用<code>UserDetailsService</code>&nbsp;，即使用户名和密码实际上没有用作身份验证决策的一部分。他们可能只使用返回的<code>UserDetails</code>&nbsp;对象作为其授权权限信息，因为其他一些系统(如LDAP或X.509或CAS等)已经承担了实际验证凭据的责任。</p> <p>由于<code>UserDetailsService</code>&nbsp;的实现非常简单，因此用户应该很容易使用自己选择的持久性策略检索身份验证信息。话虽如此，Spring Security 确实包括了几个有用的基础实现，我们将在下面讨论。</p> <p>2.1 In-Memory Authentication 内存中的身份验证</p> <p>创建自定义<code>UserDetailsService</code>&nbsp;实现，从所选的持久性引擎提取信息，这很容易使用，但许多应用程序不需要这样的复杂性。如果您正在构建一个原型应用程序或刚刚开始集成 Spring Security，而又不想花时间配置数据库或编写<code>UserDetailsService</code>&nbsp;实现，则尤其如此。对于这种情况，一个简单的选择是使用安全名称空间中的<code>user-service</code>&nbsp;元素:</p> <pre>&lt;user-service id="userDetailsService"&gt; &lt;!-- 密码前缀为{noop}，以指示DelegatingPasswordEncoder应该使用NoOpPasswordEncoder。这对于生产是不安全的，但可以使读取样品更容易。通常密码应该使用BCrypt进行散列 --&gt;   &lt;user name="jimi" password="{noop}jimispassword" authorities="ROLE_USER, ROLE_ADMIN" /&gt;   &lt;user name="bob" password="{noop}bobspassword" authorities="ROLE_USER" /&gt; &lt;/user-service&gt; 复制代码</pre> <p>它还支持使用外部属性文件:</p> <pre>&lt;user-service id="userDetailsService" properties="users.properties"/&gt; 复制代码</pre> <p>属性文件应该包含表单中的条目</p> <pre>username=password,grantedAuthority[,grantedAuthority][,enabled|disabled] 复制代码</pre> <p>例如</p> <pre>jimi=jimispassword,ROLE_USER,ROLE_ADMIN,enabled bob=bobspassword,ROLE_USER,enabled 复制代码</pre> <p>2.2 JdbcDaoImpl</p> <p>Spring Security 还包括一个<code>UserDetailsService</code>&nbsp;，它可以从 JDBC 数据源获得身份验证信息。在内部使用了Spring JDBC，因此它避免了仅用于存储用户详细信息的全功能对象关系映射器(ORM)的复杂性。如果您的应用程序确实使用 ORM 工具，您可能更喜欢编写一个自定义<code>UserDetailsService</code>&nbsp;来重用您可能已经创建的映射文件。返回到<code>JdbcDaoImpl</code>&nbsp;，配置示例如下所示:</p> <pre>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;     &lt;property name="driverClassName" value="org.hsqldb.jdbcDriver"/&gt;     &lt;property name="url" value="jdbc:hsqldb:hsql://localhost:9001"/&gt;     &lt;property name="username" value="sa"/&gt;     &lt;property name="password" value=""/&gt; &lt;/bean&gt;  &lt;bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl"&gt;     &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; 复制代码</pre> <p>你可以通过修改上面显示的<code>DriverManagerDataSource</code>&nbsp;来使用不同的关系数据库管理系统。您还可以使用从 JNDI 获得的全局数据源，就像使用任何其他 Spring 配置一样。</p> <p>2.3 Authority Groups 权限组</p> <p>默认情况下，<code>JdbcDaoImpl</code>&nbsp;在假定权限直接映射到用户的情况下加载单个用户的权限(请参阅数据库模式附录)。另一种方法是将权限划分为组，并将组分配给用户。有些人喜欢用这种方法来管理用户权限。有关如何启用组权限的更多信息，请参阅<code>JdbcDaoImpl</code>&nbsp;Javadoc。组模式也包含在附录中。</p> <h3>三、案例</h3> <p>3.1 环境</p> <pre>spring=5.2.12 spring-security=5.3.6 tomcat=8.5 jdk=1.8 复制代码</pre> <p>说明：这里 Tomcat 版本一定要求为 8.5 以上，由于我这里使用的 Spring 版本为 5.x，若使用低版本的 Tomcat 项目会报以下异常：</p> <pre>java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.changeSessionId()Ljava/lang/String 复制代码</pre> <p>后续为了更好的理解 Spring Security，我们项目不使用 Spring Boot，Spring Boot 会把一些细节给封装和处理，对我们理解技术或框架本身不太好。</p> <p>3.2 创建项目</p> <p>在 Idea 中使用 Maven 创建一个普通的 JavaWeb 项目，引入相关依赖：</p> <pre>&lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet&lt;/groupId&gt;         &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;         &lt;version&gt;2.5&lt;/version&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; 复制代码</pre> <p>3.3 配置</p> <p>3.3.1 web.xml</p> <pre>&lt;!-- 3.配置 servlet --&gt; &lt;servlet&gt;     &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt;     &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt;     &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;  &lt;context-param&gt;     &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;     &lt;param-value&gt;classpath:application-context.xml&lt;/param-value&gt; &lt;/context-param&gt;  &lt;!-- 2.配置过滤器 在 IOC 中查找 --&gt; &lt;filter&gt;     &lt;filter-name&gt;webSecurityFilter&lt;/filter-name&gt;     &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;     &lt;init-param&gt;         &lt;param-name&gt;targetBeanName&lt;/param-name&gt;         &lt;param-value&gt;springSecurityFilterChain&lt;/param-value&gt;     &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt;     &lt;filter-name&gt;webSecurityFilter&lt;/filter-name&gt;     &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;  &lt;!-- 1. 初始化，启动 Spring IOC 容器 --&gt; &lt;listener&gt;     &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; 复制代码</pre> <p>3.3.2 springMVC-servlet.xml</p> <p>说明：把这个文件放在 项目的<code>webapp/WEB-INF</code>&nbsp;目录下。文件名必须为 上面的<code>web.xml</code>&nbsp;中<code>{sevlet-name}-servlet.xml</code>&nbsp;。如此配置的好处就是我们无需在<code>web.xml</code>&nbsp;中去引入配置文件。否则我们就需要在<code>web.xml</code>&nbsp;中的<code>servlet</code>&nbsp;标签里面再配置<code>&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;&lt;param-value&gt;classpath:myspringmvc.xml&lt;/param-value&gt;&lt;/init-param&gt;</code>&nbsp;。</p> <pre>&lt;!-- 开启扫描 controller --&gt; &lt;context:component-scan base-package="com.hz.ss.controller" /&gt;  &lt;!-- 配置 jsp 解析器 --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;     &lt;property name="prefix" value="/" /&gt;     &lt;property name="suffix" value=".jsp" /&gt; &lt;/bean&gt; 复制代码</pre> <p>3.3.3 application-context.xml</p> <pre>&lt;!-- 启动注解配置 --&gt; &lt;context:annotation-config /&gt; &lt;!-- 配置注解扫描基础包 --&gt; &lt;context:component-scan base-package="com.hz.ss" /&gt; 复制代码</pre> <p>3.3.4 配置 UserDetailsService 实现</p> <pre>package com.hz.ss.config;  import org.springframework.context.annotation.Bean; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.provisioning.InMemoryUserDetailsManager;  @EnableWebSecurity public class WebSecurityConfig {      @Bean     public UserDetailsService userDetailsService() {         InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();         manager.createUser(                 User.withDefaultPasswordEncoder()                         .username("root")                         .password("123")                         .roles("ADMIN")                         .build()         );          return manager;     } } 复制代码</pre> <p>3.3.5 创建资源</p> <pre>package com.hz.ss.controller;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping;  @Controller public class IndexController {      @GetMapping("/index")     public String index() {         return "index";     } } 复制代码</pre> <p>3.4 验证及总结</p> <p>当我们访问资源<code>http://127.0.0.1:8080/hz_ss09/index</code>&nbsp;时，由于未做身份验证自动跳转到默认的登录页。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220602/fe0f123f70ec1dd721495263352fc04e.jpg"></p> <p>输入我们上面配置的验证信息，会自动跳转到我们登录前访问的页面。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220602/31ab7a53dc9613f4bbc248ebca97b555.jpg"></p> <p>这里我们来说明下 web.xml 中的 filter 配置<code>DelegatingFilterProxy</code>&nbsp;。</p> <p>在前文Spring Security 结构中，我们了解类<code>DelegatingFilterProxy</code>&nbsp;是用来代理javaee和spring的bean，所以在配置 filter 的时候，我们就不能单单配置某一个filter。当我们配置好了这个代理 Filter 之后，当项目启动的时候，会自动调用里面的两个方法，我们来看看源码。</p> <pre>public class DelegatingFilterProxy extends GenericFilterBean {     @Override     protected void initFilterBean() throws ServletException {         synchronized (this.delegateMonitor) {             if (this.delegate == null) {                 // 如果没有指定目标bean名称，则使用过滤器名称                 if (this.targetBeanName == null) {                     this.targetBeanName = getFilterName();                 }                 // 获取Spring根应用上下文，如果可能的话，尽早初始化委托。                 // 如果根应用程序上下文将在这个过滤器代理之后启动，我们将不得不求助于惰性初始化。                 WebApplicationContext wac = findWebApplicationContext();                 if (wac != null) {                     this.delegate = initDelegate(wac);                 }             }         }     }      protected Filter initDelegate(WebApplicationContext wac) throws ServletException {         String targetBeanName = getTargetBeanName();         Assert.state(targetBeanName != null, "No target bean name set");         Filter delegate = wac.getBean(targetBeanName, Filter.class);         if (isTargetFilterLifecycle()) {             delegate.init(getFilterConfig());         }         return delegate;     } } 复制代码</pre> <p>从方法<code>initFilterBean()</code>&nbsp;，我们了解到了，为什么在<code>web.xml</code>&nbsp;中，需要配置初始化参数<code>targetBeanName</code>&nbsp;。若我们不配置该参数，项目运行时，会去IOC中查找filter的bean，此时会查找失败包异常，<code>No bean named 'webSecurityFilter' available</code>&nbsp;。</p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-101863.htm">新手养猫基础知识 新手养猫基础知识电子书</a></p>
                                        <p>下一个：<a href="/news/article-102646.htm">JavaScript 对象的四种方式比较详解_javascript技巧</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-80720.htm" title="动物医院诊疗范围有哪些项目（动物医院诊室）">动物医院诊疗范围有哪些项目（动物医院诊室）</a></li>
                        <li class="py-2"><a href="/news/article-79353.htm" title="Spring AOP&#8212;面向切面编程入门">Spring AOP&#8212;面向切面编程入门</a></li>
                        <li class="py-2"><a href="/news/article-80047.htm" title="宠物食品代加工能赚钱吗（宠物代加工食品厂）">宠物食品代加工能赚钱吗（宠物代加工食品厂）</a></li>
                        <li class="py-2"><a href="/news/article-77983.htm" title="猫三联三针一共多少钱（猫三联一针价格）">猫三联三针一共多少钱（猫三联一针价格）</a></li>
                        <li class="py-2"><a href="/news/article-71930.htm" title="北京领养小狗（北京领养小狗公司）">北京领养小狗（北京领养小狗公司）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-clash-v2ray-ss-ssr.htm" title="免费V2Ray | 3月17日20.7M/S|免费Shadowrocket/SSR/V2ray/Clash免费节点订阅分享">免费V2Ray | 3月17日20.7M/S|免费Shadowrocket/SSR/V2ray/Clash免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-11-free-high-speed-nodes.htm" title="免费V2Ray | 3月11日20.2M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享">免费V2Ray | 3月11日20.2M/S|免费Clash/Shadowrocket/SSR/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-102646.htm" title="JavaScript 对象的四种方式比较详解_javascript技巧">JavaScript 对象的四种方式比较详解_javascript技巧</a></li>
                        <li class="py-2"><a href="/news/article-81438.htm" title="动物防疫疫苗费取消的相关文件是什么意思啊（取消动物防疫条件合格证距离的规定）">动物防疫疫苗费取消的相关文件是什么意思啊（取消动物防疫条件合格证距离的规定）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-2-node-share.htm" title="免费V2Ray | 4月2日20.4M/S|免费V2ray/Shadowrocket/Clash/SSR免费节点订阅分享">免费V2Ray | 4月2日20.4M/S|免费V2ray/Shadowrocket/Clash/SSR免费节点订阅分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- /Alt Services Section -->
    </main>
        <footer id="footer" class="footer dark-background">
        <div class="container copyright text-center mt-4">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p>
                <a href="/">免费V2Ray 订阅机场节点官网</a> 版权所有 Powered by WordPress
            </p>
            <div class="credits">
                <!-- All the links in the footer should remain intact. -->
                <!-- You can delete the links only if you've purchased the pro version. -->
                <!-- Licensing information:  -->
                <!-- Purchase the pro version with working PHP/AJAX contact form: [buy-url] -->
            </div>
        </div>
    </footer>
    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Preloader -->
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script data-cfasync="false" src="/assets/website/js/frontend/v2raylinux/email-decode.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/jquery-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/validate.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/aos.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2raylinux/purecounter_vanilla.js"></script>
    <!-- Main JS File -->
    <script src="/assets/website/js/frontend/v2raylinux/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>